{
	"info": {
		"_postman_id": "bf71fadc-03ef-4b5c-9c75-4df5843540d0",
		"name": "flask_api_test_(full)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24895081"
	},
	"item": [
		{
			"name": "server_check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"API доступен\", function() {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 404]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/data",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_all_products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has products array\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('products');\r",
							"    pm.expect(jsonData.products).to.be.an('array');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Updated Product\",\r\n    \"price\": 150.99,\r\n    \"stock\": 25\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_product_by_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for existing product\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Product has required fields\", function() {\r",
							"    const product = pm.response.json();\r",
							"    pm.expect(product).to.have.all.keys('id', 'name', 'price', 'stock');\r",
							"});\r",
							"\r",
							"// тест для несуществующего товара (id=999)\r",
							"pm.test(\"Status code is 404 for non-exist product\", function() {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
							"    if (pm.response.code === 404) {\r",
							"        pm.expect(pm.response.json()).to.have.property('error');\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "create_product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"New product has correct data\", function() {\r",
							"    const newProduct = pm.response.json();\r",
							"    pm.expect(newProduct.name).to.eql(\"TV\");\r",
							"    pm.expect(newProduct.price).to.eql(299.99);\r",
							"    pm.expect(newProduct.stock).to.eql(15);\r",
							"    \r",
							"    // сохранить ID для последующих тестов\r",
							"    pm.environment.set(\"new_product_id\", newProduct.id);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"TV\",\n    \"price\": 299.99,\n    \"stock\": 15\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "create_order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Order has correct structure\", function() {\r",
							"    const order = pm.response.json();\r",
							"    pm.expect(order).to.have.property('id');\r",
							"    pm.expect(order.items).to.be.an('array').that.is.not.empty;\r",
							"    pm.expect(order.items[0]).to.have.all.keys('product_id', 'quantity', 'price');\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"items\": [\n        {\"product_id\": 1, \"quantity\": 2},\n        {\"product_id\": 2, \"quantity\": 1}\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "reset_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Database reset successful\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.body(\"Database reset\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/reset",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "response_time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// проверка удаления несуществующего товара\r",
							"pm.test(\"DELETE non-existent product returns 404\", function() {\r",
							"    const deleteRequest = {\r",
							"        url: pm.variables.get(\"base_url\") + \"/products/9999\",\r",
							"        method: \"DELETE\"\r",
							"    };\r",
							"    \r",
							"    pm.sendRequest(deleteRequest, function(err, res) {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"        pm.expect(res.json().error).to.equal(\"Product not found\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// успешное обновление\r",
							"pm.test(\"PUT: Successful update returns 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json().success).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Updated Product\",\r\n    \"price\": 150.99,\r\n    \"stock\": 25\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}//products/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"",
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_product_price",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// успешное обновление\r",
							"pm.test(\"PUT: Successful update returns 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json().success).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"price\": 192.59\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
}